classDiagram
    %% SWITCH Core Game Architecture
    %% Sprint 0 Status: Unity Project Setup Complete ✅
    %% Sprint 1 Status: Core Mechanics Complete ✅
    %% Sprint 2 Status: Polish & Power-ups Complete ✅
    %% Ready for Sprint 3: Social & Launch Implementation
    
    %% Core Game Management
    class GameManager {
        -IGameState currentState
        -IEventBus eventBus
        -ISaveManager saveManager
        -INetworkManager networkManager
        -int currentScore
        -float gameTime
        -GameConfig config
        +Initialize()
        +StartGame()
        +PauseGame()
        +EndGame()
        +HandleMatch(MatchData)
        +HandlePowerUp(PowerUpType)
        +UpdateScore(int)
        -ChangeState(IGameState)
        -CheckGameOver()
        -SaveGameState()
    }

    class IGameState {
        <<interface>>
        +Enter()
        +Execute()
        +Exit()
        +CanTransitionTo(IGameState)
    }

    class MenuState {
        -UIManager uiManager
        +Enter()
        +Execute()
        +Exit()
        +HandleMenuInput()
    }

    class PlayingState {
        -BoardController boardController
        -InputManager inputManager
        +Enter()
        +Execute()
        +Exit()
        +ProcessPlayerInput()
    }

    class PausedState {
        -float pauseTime
        +Enter()
        +Execute()
        +Exit()
        +ResumeGame()
    }

    class GameOverState {
        -GameOverData gameOverData
        +Enter()
        +Execute()
        +Exit()
        +ShowResults()
        +ShareToSocial()
        +SubmitScore()
    }

    class ShareState {
        -int score
        -string screenshotPath
        +Enter()
        +Execute()
        +Exit()
        +ShareToTwitter()
        +ShareToFacebook()
        +ShareToInstagram()
        +CopyLink()
    }

    %% Board and Tile System
    class BoardController {
        -ITile[,] grid
        -IObjectPool tilePool
        -Vector2Int boardSize
        -IGravitySystem gravitySystem
        -IMatchDetector matchDetector
        +Initialize(int width, int height)
        +PlaceTile(ITile, Vector2Int)
        +RemoveTile(Vector2Int)
        +GetTile(Vector2Int)
        +ApplyGravity(Direction)
        +GetBoardState()
        +IsValidPosition(Vector2Int)
        +ClearMatches(MatchData[])
        +AnimateTileMovement()
    }

    class ITile {
        <<interface>>
        +TileType Type
        +Color Color
        +Vector2Int Position
        +GameObject Visual
        +bool IsMatched
        +Initialize(TileData)
        +AnimateToPosition(Vector3)
        +Destroy()
        +SetMatched(bool)
    }

    class BasicTile {
        -TileData data
        -Animator animator
        -SpriteRenderer spriteRenderer
        +Initialize(TileData)
        +AnimateToPosition(Vector3)
        +Destroy()
        +SetMatched(bool)
        +PlayMatchAnimation()
    }

    class PowerTile {
        -PowerUpType powerType
        -float effectRadius
        -bool isActivated
        +Initialize(TileData)
        +ActivatePower()
        +GetAffectedTiles()
        +SetMatched(bool)
        +PlayActivationEffect()
    }

    class BlockingTile {
        -BlockingTileData data
        -bool canBeSwapped
        -bool isAtEdge
        +Initialize(BlockingTileData)
        +CanBeSwappedWith(ITile)
        +MoveTowardEdge()
        +ReachEdge()
        +SetMatched(bool)
        +PlayRemovalAnimation()
    }

    class PowerOrb {
        -PowerOrbData data
        -Vector2Int boardPosition
        -Vector2Int targetEdge
        -int age
        -bool isActive
        -bool hasReachedEdge
        +Initialize(PowerOrbData, Vector2Int)
        +MoveTowardEdge()
        +ReachTargetEdge()
        +LoseOrb()
        +GetScoreValue()
        +bool ReachedCorrectEdge()
        -Vector2Int GetMovementDirection()
        -bool IsAtTargetEdge(Vector2Int)
    }

    class TileFactory {
        -IObjectPool tilePool
        -TileConfig config
        -Dictionary~TileType, GameObject~ prefabs
        +CreateTile(TileType)
        +ReturnTile(ITile)
        +PrewarmPool(int count)
        +GetTilePrefab(TileType)
    }

    %% Input System
    class InputManager {
        -IInputManager inputSystem
        -SwipeDetector swipeDetector
        -TapDetector tapDetector
        -DoubleTapDetector doubleTapDetector
        -InputBuffer inputBuffer
        -InputMode currentMode
        -InputConfig config
        -SwapCache swapCache
        +Initialize(InputConfig config)
        +ProcessInput()
        +HandleSwipe(SwipeData swipe)
        +HandleTap(TapData tap)
        +HandleDoubleTap(DoubleTapData tap)
        +SwitchMode(InputMode mode)
        +EnableInput()
        +DisableInput()
        +CacheSwapData(Vector2Int, Vector2Int)
        +GetCachedSwapData()
    }

    class SwipeDetector {
        -float minSwipeDistance
        -float maxSwipeTime
        -Vector2 startPosition
        -float startTime
        +DetectSwipe(Vector2 position, float time)
        +CalculateDirection(Vector2 start, Vector2 end)
        +ValidateSwipe(SwipeData swipe)
        +GetSwipeMagnitude()
    }

    class TapDetector {
        -float maxTapTime
        -float maxTapDistance
        -Vector2 tapPosition
        +DetectTap(Vector2 position, float time)
        +ValidateTap(TapData tap)
        +GetTapPosition(Vector2 screenPos)
        +IsDoubleTap()
    }

    class DoubleTapDetector {
        -float maxDoubleTapTime
        -float maxDoubleTapDistance
        -Vector2 firstTapPosition
        -float firstTapTime
        -bool waitingForSecondTap
        +DetectDoubleTap(Vector2 position, float time)
        +ValidateDoubleTap(DoubleTapData tap)
        +GetDoubleTapPosition(Vector2 screenPos)
        +ResetDoubleTap()
    }

    class SwapCache {
        -Vector2Int tile1Position
        -Vector2Int tile2Position
        -Direction swapDirection
        -float timestamp
        -bool isValid
        +CacheSwap(Vector2Int pos1, Vector2Int pos2)
        +GetSwapDirection()
        +GetTilePositions()
        +IsValid()
        +Clear()
        +GetTimestamp()
    }

    %% Extended Queue System (15-Tile)
    class QueueManager {
        -IQueueSystem queueSystem
        -TileDistributor distributor
        -QueueDisplay display
        -QueueState currentState
        -QueueConfig config
        -int visibleQueueSize
        -int bufferSize
        -int totalQueueSize
        +Initialize(QueueConfig config)
        +ProcessQueue()
        +RequestTiles(int count)
        +RefillFromDistributor()
        +UpdateDisplay()
        +GetQueueStatistics()
        +ShuffleQueue()
        +PeekNextTiles(int count)
        +GetVisibleTiles()
        +GetBufferTiles()
        +RefillTo15Tiles()
    }

    class TileDistributor {
        -TileConfig tileConfig
        -AntiFrustrationSystem antiFrustration
        -StatisticalAnalyzer analyzer
        -Queue~TileData~ tileQueue
        -LookAheadAnalyzer lookAheadAnalyzer
        +GenerateTiles(int count)
        +AnalyzeBoardState(BoardState state)
        +AdjustDistribution(BoardAnalysis analysis)
        +GetOptimalTiles(BoardState state, int count)
        +ValidateDistribution(TileData[] tiles)
        +ApplyAntiFrustration(BoardState state)
        +Analyze15TileLookAhead()
        +GenerateStrategicTiles(BoardState state)
    }

    %% Match Detection
    class MatchDetector {
        -IMatchDetector detector
        -MatchPattern[] patterns
        -MatchConfig config
        -CascadeResolver cascadeResolver
        +Initialize(MatchConfig config)
        +DetectMatches(BoardState state)
        +ValidateMatch(MatchData match)
        +CalculateScore(MatchData match)
        +FindCascadeMatches(BoardState state)
        +GetMatchPatterns()
        +CheckForSpecialMatches()
    }

    class CascadeResolver {
        -MatchDetector detector
        -CascadeConfig config
        -int currentCascadeLevel
        +ResolveCascades(BoardState state)
        +CalculateCascadeScore(MatchData[] matches)
        +AnimateCascade(MatchData[] matches)
        +CheckForMoreCascades(BoardState state)
        +GetCascadeChain(MatchData initialMatch)
        +IncrementCascadeLevel()
    }

    %% Gravity System
    class DirectionalGravity {
        -IGravitySystem gravitySystem
        -GravityCalculator calculator
        -TileMovement movement
        -Direction currentDirection
        -GravityConfig config
        +Initialize(GravityConfig config)
        +SetGravityDirection(Direction direction)
        +ApplyGravityToBoard(BoardState state)
        +CalculateTileMovement(Vector2Int position)
        +AnimateGravityMovement(TileMovement[] movements)
        +ValidateGravityResult(GravityResult result)
        +GetCurrentDirection()
    }

    class GravityCalculator {
        -Direction direction
        -Vector2Int boardSize
        -float gravitySpeed
        +CalculateMovement(Vector2Int position, Direction dir)
        +GetGravityVector(Direction direction)
        +FindLandingPosition(Vector2Int start, BoardState state)
        +CalculateFallDistance(Vector2Int start, Vector2Int end)
        +ValidateMovement(MovementData movement)
        +GetOptimalPath(Vector2Int start, Vector2Int end)
    }

    %% Power-Up System
    class PowerUpExecutor {
        -IPowerUp currentPowerUp
        -PowerUpInventory inventory
        -GameContext gameContext
        -PowerUpEffects effects
        -PowerUpFactory factory
        +SelectPowerUp(PowerUpType type)
        +ExecuteSelectedPowerUp()
        +CancelPowerUp()
        +PreviewPowerUp(PowerUpType type)
        +ValidatePowerUp(IPowerUp powerUp)
        -ApplyPowerUpEffects(PowerUpResult result)
        -UpdateInventory()
        -NotifyPowerUpUsed(PowerUpType type)
    }

    class PowerUpInventory {
        -Dictionary~PowerUpType, int~ inventory
        -int maxCapacity
        -PowerUpConfig config
        -SaveManager saveManager
        +AddPowerUp(PowerUpType type, int count)
        +UsePowerUp(PowerUpType type)
        +GetCount(PowerUpType type)
        +GetAvailablePowerUps()
        +IsInventoryFull()
        +SaveInventory()
        +LoadInventory()
        +CanUsePowerUp(PowerUpType type)
    }

    class IPowerUp {
        <<interface>>
        +PowerUpType Type
        +string Name
        +int UsesRemaining
        +bool IsAvailable()
        +void Execute(GameContext context)
        +bool CanExecute(GameContext context)
        +PowerUpResult GetPreview(GameContext context)
    }

    class PowerUpBase {
        <<abstract>>
        #PowerUpType type
        #string name
        #string description
        #Sprite icon
        #int maxUses
        #int currentUses
        #AudioClip activationSound
        +Initialize(PowerUpData data)
        +Execute(GameContext context)*
        +CanExecute(GameContext context)*
        +GetPreview(GameContext context)*
        #LogUsage()
        #PlayActivationEffect()
    }

    class QueueShuffle {
        -int shufflePositions
        +Execute(GameContext context)
        +CanExecute(GameContext context)
        +GetPreview(GameContext context)
        -ShuffleQueue(QueueState queue)
    }

    class ColorBomb {
        -TileType targetColor
        -int blastRadius
        +Execute(GameContext context)
        +CanExecute(GameContext context)
        +GetPreview(GameContext context)
        -FindColoredTiles(BoardState board, TileType color)
        -TriggerExplosion(Vector2Int[] positions)
    }

    class QueuePeek {
        -int peekDistance
        +Execute(GameContext context)
        +CanExecute(GameContext context)
        +GetPreview(GameContext context)
        -RevealFutureTiles(int count)
    }

    class GravityReverse {
        -float duration
        +Execute(GameContext context)
        +CanExecute(GameContext context)
        +GetPreview(GameContext context)
        -ReverseGravityDirection(Direction current)
    }

    class UndoMove {
        -GameStateData previousState
        +Execute(GameContext context)
        +CanExecute(GameContext context)
        +GetPreview(GameContext context)
        -RestoreGameState(GameStateData state)
    }

    class PowerUpFactory {
        -Dictionary~PowerUpType, PowerUpData~ powerUpData
        -IObjectPool powerUpPool
        +CreatePowerUp(PowerUpType type)
        +RegisterPowerUp(PowerUpType type, PowerUpData data)
        +GetPowerUpData(PowerUpType type)
        +PreloadPowerUps()
    }

    %% UI System - FINAL DESIGN
    class MainUIManager {
        -TopBarUI topBarUI
        -HeatMeterUI heatMeterUI
        -GameAreaUI gameAreaUI
        -PowerFeedbackUI powerFeedbackUI
        -AdBannerUI adBannerUI
        -MenuOverlayUI menuOverlayUI
        -UIScaler uiScaler
        -bool isInitialized
        +InitializeUI()
        +ShowCascadeFeedback(int cascadeCount)
        +ShowPointsPopup(int points)
        +ShowAchievementFeedback(string achievement)
        +UpdateQueue(List~object~ queueData)
        +SetCurrentQueueIndex(int index)
        +SetEdgeGlows(bool top, bool right, bool bottom, bool left)
        +AddPowerUp(int index, int count)
        +SetPremiumUser(bool isPremium)
        +GetDeviceType()
        +IsInitialized()
    }

    class TopBarUI {
        -TextMeshProUGUI scoreText
        -Button menuButton
        -TextMeshProUGUI timerText
        -bool animateScore
        -long currentDisplayedScore
        -long targetScore
        +OnScoreChanged(long newScore)
        +OnMenuButtonClick()
        +SetTimeTrialMode(bool isTimeTrial)
        +UpdateTimer(float timeRemaining)
        +SetScoreImmediate(long score)
    }

    class HeatMeterUI {
        -Slider heatBar
        -Image heatBarFill
        -TextMeshProUGUI multiplierText
        -TextMeshProUGUI heatLabel
        -ParticleSystem heatParticles
        -ParticleSystem flameParticles
        -ParticleSystem infernoParticles
        -Color currentColor
        -bool isPulsing
        +OnMomentumChanged(float newMomentum)
        +OnHeatLevelChanged(float newHeat)
        +TriggerInfernoEffect()
        +SetHeatImmediate(float heat)
    }

    class GameAreaUI {
        -GameObject queuePanel
        -Transform queueContainer
        -GameObject boardGrid
        -Transform tileContainer
        -LineRenderer[] edgeGlows
        -List~Image~ queueDots
        -GameObject[,] tileSlots
        -int currentQueueIndex
        +UpdateQueue(List~object~ queueData)
        +SetCurrentQueueIndex(int index)
        +SetEdgeGlow(int edgeIndex, bool active)
        +SetAllEdgeGlows(bool top, bool right, bool bottom, bool left)
        +GetTileSlotPosition(Vector2Int gridPos)
    }

    class PowerFeedbackUI {
        -Button[] powerSlots
        -Image[] powerIcons
        -TextMeshProUGUI[] powerCounts
        -TextMeshProUGUI cascadeText
        -TextMeshProUGUI pointsPopup
        -int[] powerCounts
        -bool[] powerReady
        +AddPowerUp(int index, int count)
        +SetPowerUpCount(int index, int count)
        +ShowCascadeFeedback(int cascadeCount)
        +ShowPointsPopup(int points)
        +ShowAchievementFeedback(string achievement)
        +GetPowerUpCount(int index)
        +IsPowerUpReady(int index)
    }

    class AdBannerUI {
        -GameObject adContainer
        -GameObject alternativeContent
        -TextMeshProUGUI alternativeText
        -bool premiumUser
        -bool adsEnabled
        -bool adLoaded
        +LoadAd()
        +ShowAd()
        +ShowAlternativeContent()
        +SetPremiumUser(bool isPremium)
        +SetAdsEnabled(bool enabled)
        +IsAdLoaded()
        +GetBannerDimensions()
    }

    class MenuOverlayUI {
        -GameObject menuPanel
        -CanvasGroup menuCanvasGroup
        -Button resumeButton
        -Button settingsButton
        -Button howToPlayButton
        -Button achievementsButton
        -Button leaderboardsButton
        -Button shareScoreButton
        -Button mainMenuButton
        -bool isMenuOpen
        +OpenMenu()
        +CloseMenu()
        +ToggleMenu()
        +SetMenuTitle(string title)
        +SetButtonEnabled(MenuButtonType buttonType, bool enabled)
        +IsMenuOpen()
    }

    class UIScaler {
        -float targetAspectRatio
        -float tabletAspectRatio
        -DeviceType currentDeviceType
        -float currentAspectRatio
        -bool hasNotch
        -Canvas mainCanvas
        -CanvasScaler canvasScaler
        +DetectDevice()
        +AdjustForDevice()
        +GetDeviceType()
        +GetAspectRatio()
        +HasNotch()
        +IsTablet()
        +IsPhone()
        +ForceAdjustment()
    }

    class UIColors {
        +Color background
        +Color scoreText
        +Color heatCold
        +Color heatWarm
        +Color heatHot
        +Color heatBlazing
        +Color heatInferno
        +Color powerReady
        +Color edgeTop
        +Color edgeRight
        +Color edgeBottom
        +Color edgeLeft
        +GetHeatColor(float heatLevel)
        +GetHeatLabel(float heatLevel)
    }

    %% Tutorial System
    class TutorialManager {
        -ITutorialManager tutorialSystem
        -TutorialSequencer sequencer
        -HintSystem hintSystem
        -TutorialState currentState
        -TutorialConfig config
        +Initialize(TutorialConfig config)
        +StartProgressiveTutorial()
        +TriggerContextualHint(GameContext context)
        +RecordPlayerProgress(PlayerAction action)
        +DisableTutorial()
        +GetTutorialProgress()
        -CheckTriggerConditions()
        -SaveTutorialState()
    }

    class HintSystem {
        -Dictionary~HintType, HintData~ hints
        -HintPriorityQueue activeHints
        -float hintCooldown
        -HintConfig config
        +QueueHint(HintType type, int priority)
        +ShowNextHint()
        +DismissCurrentHint()
        +IsHintAvailable(HintType type)
        +GetHintHistory()
        -EvaluateHintConditions(GameContext context)
        -RecordHintShown(HintType type)
    }

    class TutorialSequencer {
        -Queue~TutorialStep~ steps
        -TutorialStep currentStep
        -int stepIndex
        +LoadSequence(TutorialSequence sequence)
        +NextStep()
        +PreviousStep()
        +JumpToStep(int index)
        +IsSequenceComplete()
        +GetCurrentStepInfo()
        -ValidateStepCompletion()
    }

    %% Service Layer
    class SaveManager {
        -ISaveManager saveSystem
        -SQLiteDatabase database
        -PlayerPrefs backup
        -SaveConfig config
        +SaveGameState(GameStateData state)
        +LoadGameState()
        +SavePlayerProfile(PlayerProfile profile)
        +LoadPlayerProfile()
        +SaveSettings(SettingsData settings)
        +LoadSettings()
        +BackupToCloud()
        +RestoreFromCloud()
    }

    class AudioManager {
        -AudioPool primaryPool
        -AudioPool secondaryPool
        -AudioSource musicSource
        -AudioSource notificationSource
        -AudioMixer masterMixer
        -AudioConfig config
        +PlaySound(AudioClip, Priority)
        +PlayMusic(AudioClip)
        +StopSound(int id)
        +SetVolume(float)
        +DuckAudio(float duration)
        +PlayMatchSound(MatchType type)
        +PlayPowerUpSound(PowerUpType type)
    }

    class NetworkManager {
        -SimpleLeaderboardService leaderboardService
        -FriendCodeSystem friendSystem
        -bool isOnline
        -NetworkConfig config
        +SubmitScore(int score)
        +GetLeaderboard() LeaderboardEntry[]
        +GetFriendsLeaderboard() LeaderboardEntry[]
        +ShareToSocial(int score)
        +CheckConnection() bool
        +GenerateFriendCode() string
        +AddFriend(string friendCode) bool
    }

    class SimpleLeaderboardService {
        -FirebaseDatabase database
        -string playerId
        -string friendCode
        +GetTop100() LeaderboardEntry[]
        +SubmitScore(int score) bool
        +GetFriendsScores() LeaderboardEntry[]
        +GenerateFriendCode() string
        +AddFriend(string friendCode) bool
        +RemoveFriend(string friendCode) bool
        +GetPlayerRank(int score) int
    }

    class FriendCodeSystem {
        -string playerId
        -string friendCode
        -string[] friends
        +GenerateCode() string
        +ValidateCode(string code) bool
        +AddFriend(string code) bool
        +GetFriends() string[]
        +IsFriend(string playerId) bool
    }

    class LeaderboardEntry {
        +string playerId
        +string displayName
        +int score
        +long timestamp
        +string friendCode
        +LeaderboardEntry(string id, string name, int score)
        +bool IsValid()
        +string ToString()
    }

    class PerformanceMonitor {
        -FPSCounter fpsCounter
        -MemoryTracker memoryTracker
        -DrawCallCounter drawCallCounter
        -BatteryMonitor batteryMonitor
        -PerformanceConfig config
        +Initialize(PerformanceConfig config)
        +StartMonitoring()
        +StopMonitoring()
        +GetPerformanceReport()
        +LogPerformanceMetrics()
        +CheckPerformanceThresholds()
        +TriggerPerformanceWarning()
        +AdaptQualityLevel()
    }

    %% Data Structures
    class TileData {
        <<struct>>
        +TileType type
        +Color color
        +Vector2Int position
        +int id
        +bool isPowerUp
        +PowerUpType powerType
        +Sprite defaultSprite
        +Sprite brandedSprite
        +Color tintColor
        +Shape accessibilityShape
        +TileData(TileType type, Color color)
        +bool Equals(TileData other)
        +string ToString()
        +TileData Clone()
    }

    class BlockingTileData {
        <<struct>>
        +TileType type
        +Sprite stoneTexture
        +Color stoneColor
        +float spawnChance
        +float maxSpawnChance
        +int progressiveIncrease
        +BlockingTileData()
        +float GetSpawnChance(float gameTime)
        +bool CanSpawn(float gameTime)
    }

    class PowerOrbData {
        <<struct>>
        +OrbColor color
        +Vector2Int targetEdge
        +int baseScore
        +int ageBonus
        +float baseSpawnChance
        +float maxSpawnChance
        +Vector2Int[] centerSpawnPositions
        +Color glowColor
        +float pulseSpeed
        +float glowIntensity
        +int CalculateScore(int age)
        +float GetSpawnChance(float gameTime)
        +Vector2Int GetRandomSpawnPosition()
    }

    class SwapCacheData {
        <<struct>>
        +Vector2Int tile1Position
        +Vector2Int tile2Position
        +Direction swapDirection
        +float timestamp
        +bool isValid
        +SwapCacheData()
        +void CacheSwap(Vector2Int pos1, Vector2Int pos2)
        +Direction GetSwapDirection()
        +Vector2Int[] GetTilePositions()
        +bool IsValid()
        +void Clear()
    }

    class MatchData {
        +Vector2Int[] positions
        +TileType tileType
        +MatchType matchType
        +int score
        +float timestamp
        +bool isCascade
        +int cascadeLevel
        +MatchData(Vector2Int[] positions, TileType type)
        +int CalculateScore()
        +bool IsValid()
        +MatchData Clone()
    }

    class GameStateData {
        +BoardState boardState
        +QueueState queueState
        +PlayerStats playerStats
        +GameSettings settings
        +float gameTime
        +int currentScore
        +GameStateData()
        +void SaveToFile(string path)
        +void LoadFromFile(string path)
        +bool IsValid()
        +GameStateData Clone()
    }

    %% Sprint 2: Power-up System
    class PowerUpManager {
        -Dictionary~string, IPowerUp~ registeredPowerUps
        -Dictionary~string, float~ powerUpCooldowns
        -List~IPowerUp~ powerUpInventory
        -GameManager gameManager
        -BoardController boardController
        +RegisterPowerUp(IPowerUp)
        +UnregisterPowerUp(string)
        +ExecutePowerUp(string, PowerUpContext)
        +AddToInventory(IPowerUp)
        +RemoveFromInventory(string)
        +GetPowerUp(string)
        +GetAvailablePowerUps()
        +UpdateCooldowns()
        +CanUsePowerUp(string)
    }

    class IPowerUp {
        <<interface>>
        +string PowerUpId
        +string DisplayName
        +string Description
        +Sprite Icon
        +int Cost
        +float CooldownTime
        +bool CanUse
        +bool Execute(PowerUpContext)
        +void OnPowerUpUsed()
        +void OnPowerUpExpired()
    }

    class PowerUpContext {
        +Vector2Int targetPosition
        +ColorType targetColor
        +BoardController boardController
        +GameManager gameManager
        +Dictionary~string, object~ customData
        +PowerUpContext()
        +void SetTarget(Vector2Int)
        +void SetColor(ColorType)
        +T GetCustomData~T~(string)
        +void SetCustomData(string, object)
    }

    class ColorBombPowerUp {
        -ColorType targetColor
        -bool isExecuting
        +string PowerUpId
        +string DisplayName
        +string Description
        +bool Execute(PowerUpContext)
        +void ClearColorTiles(ColorType)
        +void OnPowerUpUsed()
    }

    class LineClearPowerUp {
        -bool isExecuting
        +string PowerUpId
        +string DisplayName
        +string Description
        +bool Execute(PowerUpContext)
        +void ClearLine(Vector2Int, Direction)
        +void OnPowerUpUsed()
    }

    class AreaClearPowerUp {
        -bool isExecuting
        +string PowerUpId
        +string DisplayName
        +string Description
        +bool Execute(PowerUpContext)
        +void ClearArea(Vector2Int, int)
        +void OnPowerUpUsed()
    }

    class TimeFreezePowerUp {
        -bool isExecuting
        -float freezeDuration
        +string PowerUpId
        +string DisplayName
        +string Description
        +bool Execute(PowerUpContext)
        +void FreezeTime(float)
        +void OnPowerUpUsed()
    }

    class ScoreMultiplierPowerUp {
        -bool isExecuting
        -float multiplier
        -float duration
        +string PowerUpId
        +string DisplayName
        +string Description
        +bool Execute(PowerUpContext)
        +void ApplyMultiplier(float, float)
        +void OnPowerUpUsed()
    }

    class PowerUpInventory {
        -List~IPowerUp~ inventory
        -int maxCapacity
        -int currentCount
        +AddPowerUp(IPowerUp)
        +RemovePowerUp(string)
        +GetPowerUp(string)
        +GetAllPowerUps()
        +HasSpace()
        +IsFull()
        +GetCount()
        +GetCapacity()
        +Clear()
    }

    class PowerUpEarningSystem {
        -Dictionary~string, int~ achievementProgress
        -Dictionary~string, Achievement~ achievements
        -GameManager gameManager
        +RegisterAchievement(Achievement)
        +UpdateProgress(string, int)
        +CheckAchievements()
        +AwardPowerUp(IPowerUp)
        +GetProgress(string)
        +GetAllAchievements()
    }

    %% Sprint 2: Animation System
    class AnimationSystem {
        -List~AnimationData~ activeAnimations
        -Queue~AnimationData~ animationPool
        -Dictionary~string, AnimationPreset~ animationPresets
        -int maxConcurrentAnimations
        -float defaultAnimationDuration
        -AnimationCurve defaultEaseCurve
        +PlayAnimation(object, AnimationType, float, float, float)
        +PlayAnimationPreset(object, string)
        +StopAnimation(AnimationData)
        +StopAllAnimations()
        +GetAnimationData()
        +ReturnAnimationData(AnimationData)
        +RegisterPreset(string, AnimationPreset)
        +UpdateAnimations()
    }

    class AnimationData {
        +object target
        +AnimationType animationType
        +float duration
        +float startValue
        +float endValue
        +AnimationCurve easeCurve
        +float currentTime
        +System.Action onCompleted
        +bool isActive
        +AnimationData()
        +void Update(float)
        +bool IsComplete()
        +void Complete()
        +void Cancel()
    }

    class AnimationPreset {
        +string presetId
        +string presetName
        +AnimationType animationType
        +float duration
        +AnimationCurve easeCurve
        +float startValue
        +float endValue
        +AnimationPreset()
        +AnimationData CreateAnimation(object)
    }

    %% Sprint 2: Audio System
    class SoundEffectManager {
        -Dictionary~string, AudioClip~ soundEffects
        -Queue~AudioSource~ audioSourcePool
        -Dictionary~string, float~ categoryVolumes
        -int maxConcurrentSounds
        +PlaySound(string, Vector3)
        +PlaySound(string, float)
        +StopSound(string)
        +StopAllSounds()
        +SetCategoryVolume(string, float)
        +GetCategoryVolume(string)
        +RegisterSound(string, AudioClip)
        +GetAudioSource()
        +ReturnAudioSource(AudioSource)
    }

    %% Sprint 2: Performance System
    class PerformanceProfiler {
        -List~PerformanceSample~ performanceSamples
        -Dictionary~string, PerformanceMetric~ performanceMetrics
        -float targetFPS
        -float maxFrameTime
        -float maxMemoryUsage
        -int maxDrawCalls
        -bool isPerformanceGood
        +StartProfiling()
        +StopProfiling()
        +RecordSample(PerformanceSample)
        +GetPerformanceReport()
        +CheckPerformanceTargets()
        +GetCurrentFPS()
        +GetCurrentMemoryUsage()
        +GetCurrentDrawCalls()
    }

    class PerformanceSample {
        +float timestamp
        +float fps
        +float frameTime
        +float memoryUsage
        +int drawCalls
        +int triangles
        +PerformanceSample()
        +bool IsWithinTargets(PerformanceTargets)
        +PerformanceSample Clone()
    }

    %% Sprint 2: Anti-frustration System
    class AntiFrustrationSystem {
        -float frustrationLevel
        -int consecutiveNoMatches
        -int maxConsecutiveNoMatches
        -bool hasGuaranteedMove
        -GameManager gameManager
        -BoardController boardController
        +CheckForGuaranteedMove()
        +GenerateGuaranteedMove()
        +UpdateFrustrationLevel()
        +ResetFrustrationLevel()
        +GetFrustrationLevel()
        +HasGuaranteedMove()
        +ValidateMoveQuality(MoveData)
    }

    class SmartTileDistribution {
        -Dictionary~ColorType, int~ colorCounts
        -float frustrationThreshold
        -int maxSameColorInRow
        -Random random
        +GenerateTile(ColorType)
        +DistributeTiles(int)
        +CheckColorBalance()
        +AdjustDistribution()
        +GetOptimalColor()
        +ValidateDistribution()
    }

    class CascadeSystem {
        -List~MatchData~ cascadeMatches
        -int currentCascadeLevel
        -float cascadeMultiplier
        -BoardController boardController
        +ProcessCascade(MatchData[])
        +DetectChainReactions()
        +CalculateCascadeScore()
        +AnimateCascade()
        +GetCascadeLevel()
        +GetCascadeMultiplier()
        +ResetCascade()
    }

    class ShapeAccessibilitySystem {
        -Dictionary~string, ShapePattern~ shapePatterns
        -bool enableColorBlindSupport
        -bool enableHighContrast
        -bool enableHints
        +DetectShapePattern(Vector2Int[])
        +GenerateHint(ShapePattern)
        +ApplyAccessibilitySettings()
        +GetShapePatterns()
        +ValidatePattern(Vector2Int[])
        +CalculatePatternScore(ShapePattern)
    }

    %% Enums
    class TileType {
        <<enumeration>>
        Basic
        PowerUp
        Blocking
        PowerOrb
    }

    class OrbColor {
        <<enumeration>>
        Blue
        Green
        Yellow
        Purple
    }

    class Shape {
        <<enumeration>>
        Circle
        Square
        Triangle
        Diamond
    }

    class Direction {
        <<enumeration>>
        Up
        Down
        Left
        Right
        None
    }

    class PowerUpType {
        <<enumeration>>
        QueueShuffle
        QueueDelete
        QueuePeek
        ColorBomb
        RowClear
        ColumnClear
        GravityReverse
        UndoMove
        BoardShuffle
        TimeFreeze
        SafetyNet
    }

    class MatchType {
        <<enumeration>>
        Horizontal
        Vertical
        LShape
        TShape
        Cross
        FiveInRow
        Special
    }

    class HintType {
        <<enumeration>>
        FirstSwipe
        QueueExplanation
        MatchMaking
        PowerUpUsage
        GravityChange
        CascadeOpportunity
        CenterPressure
        NoMovesWarning
        PowerUpAvailable
        HighScoreClose
    }

    class TutorialPhase {
        <<enumeration>>
        NotStarted
        BasicControls
        QueueSystem
        Matching
        Gravity
        PowerUps
        Advanced
        Completed
    }

    %% Relationships
    GameManager --> IGameState
    IGameState <|.. MenuState
    IGameState <|.. PlayingState
    IGameState <|.. PausedState
    IGameState <|.. GameOverState
    IGameState <|.. ShareState

    GameManager --> BoardController
    GameManager --> InputManager
    GameManager --> QueueManager
    GameManager --> MatchDetector
    GameManager --> PowerUpExecutor
    GameManager --> MainUIManager
    GameManager --> TutorialManager
    GameManager --> SaveManager
    GameManager --> AudioManager
    GameManager --> NetworkManager
    GameManager --> PerformanceMonitor

    BoardController --> ITile
    ITile <|.. BasicTile
    ITile <|.. PowerTile
    ITile <|.. BlockingTile
    ITile <|.. PowerOrb
    BoardController --> TileFactory
    BoardController --> DirectionalGravity
    BoardController --> MatchDetector

    InputManager --> SwipeDetector
    InputManager --> TapDetector
    InputManager --> DoubleTapDetector
    InputManager --> SwapCache

    QueueManager --> TileDistributor
    QueueManager --> TileData

    MatchDetector --> CascadeResolver
    MatchDetector --> MatchData

    DirectionalGravity --> GravityCalculator

    PowerUpExecutor --> PowerUpInventory
    PowerUpExecutor --> PowerUpFactory
    PowerUpFactory --> IPowerUp
    IPowerUp <|.. PowerUpBase
    PowerUpBase <|-- QueueShuffle
    PowerUpBase <|-- ColorBomb
    PowerUpBase <|-- QueuePeek
    PowerUpBase <|-- GravityReverse
    PowerUpBase <|-- UndoMove

    TutorialManager --> HintSystem
    TutorialManager --> TutorialSequencer

    %% UI System Relationships
    MainUIManager --> TopBarUI
    MainUIManager --> HeatMeterUI
    MainUIManager --> GameAreaUI
    MainUIManager --> PowerFeedbackUI
    MainUIManager --> AdBannerUI
    MainUIManager --> MenuOverlayUI
    MainUIManager --> UIScaler
    MainUIManager --> UIColors
    
    TopBarUI --> UIColors
    HeatMeterUI --> UIColors
    GameAreaUI --> UIColors
    PowerFeedbackUI --> UIColors
    AdBannerUI --> UIColors
    MenuOverlayUI --> UIColors

    TileData --> TileType
    TileData --> Shape
    BlockingTile --> BlockingTileData
    PowerOrb --> PowerOrbData
    PowerOrbData --> OrbColor
    SwapCache --> SwapCacheData
    MatchData --> MatchType
    DirectionalGravity --> Direction
    PowerUpExecutor --> PowerUpType
    HintSystem --> HintType
    TutorialManager --> TutorialPhase

    GameManager --> GameStateData
    SaveManager --> GameStateData
    PerformanceMonitor --> GameManager

    NetworkManager --> SimpleLeaderboardService
    NetworkManager --> FriendCodeSystem
    SimpleLeaderboardService --> FriendCodeSystem
    SimpleLeaderboardService --> LeaderboardEntry
    GameOverState --> ShareState

    %% Sprint 2: Power-up System Relationships
    GameManager --> PowerUpManager
    PowerUpManager --> IPowerUp
    IPowerUp <|.. ColorBombPowerUp
    IPowerUp <|.. LineClearPowerUp
    IPowerUp <|.. AreaClearPowerUp
    IPowerUp <|.. TimeFreezePowerUp
    IPowerUp <|.. ScoreMultiplierPowerUp
    PowerUpManager --> PowerUpContext
    PowerUpManager --> PowerUpInventory
    PowerUpManager --> PowerUpEarningSystem
    PowerUpContext --> BoardController
    PowerUpContext --> GameManager

    %% Sprint 2: Animation System Relationships
    GameManager --> AnimationSystem
    AnimationSystem --> AnimationData
    AnimationSystem --> AnimationPreset
    BoardController --> AnimationSystem
    PowerUpManager --> AnimationSystem

    %% Sprint 2: Audio System Relationships
    GameManager --> SoundEffectManager
    PowerUpManager --> SoundEffectManager
    BoardController --> SoundEffectManager
    AnimationSystem --> SoundEffectManager

    %% Sprint 2: Performance System Relationships
    GameManager --> PerformanceProfiler
    PerformanceProfiler --> PerformanceSample
    AnimationSystem --> PerformanceProfiler
    SoundEffectManager --> PerformanceProfiler

    %% Sprint 2: Anti-frustration System Relationships
    GameManager --> AntiFrustrationSystem
    AntiFrustrationSystem --> SmartTileDistribution
    AntiFrustrationSystem --> BoardController
    BoardController --> CascadeSystem
    CascadeSystem --> MatchDetector
    GameManager --> ShapeAccessibilitySystem
