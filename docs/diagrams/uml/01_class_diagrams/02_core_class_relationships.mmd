classDiagram
    %% Core Game Flow Classes
    class GameManager {
        -IGameState currentState
        -IEventBus eventBus
        -int currentScore
        -float gameTime
        -MomentumSystem momentumSystem
        -TurnScoreCalculator scoreCalculator
        -PowerOrbManager powerOrbManager
        +StartGame()
        +HandleMatch(MatchData)
        +HandlePowerUp(PowerUpType)
        +UpdateScore(int)
        +HandleTurnComplete(TurnResult)
        -ChangeState(IGameState)
    }

    class BoardController {
        -ITile[,] grid
        -IObjectPool tilePool
        -Vector2Int boardSize
        +PlaceTile(ITile, Vector2Int)
        +RemoveTile(Vector2Int)
        +GetTile(Vector2Int)
        +ApplyGravity(Direction)
        +ClearMatches(MatchData[])
    }

    class MatchDetector {
        -MatchPattern[] patterns
        -CascadeResolver cascadeResolver
        +DetectMatches(BoardState state)
        +ValidateMatch(MatchData match)
        +CalculateScore(MatchData match)
        +FindCascadeMatches(BoardState state)
        +CreateTurnResult(MatchData[] matches)
    }

    class QueueSystem {
        -TileDistributor distributor
        -QueueState currentState
        +RequestTiles(int count)
        +RefillFromDistributor()
        +PopNext(int count)
        +ShuffleQueue()
    }

    class TileDistributor {
        -AntiFrustrationSystem antiFrustration
        -StatisticalAnalyzer analyzer
        +GenerateTiles(int count)
        +GetOptimalTiles(BoardState state, int count)
        +ApplyAntiFrustration(BoardState state)
    }

    class GravitySystem {
        -Direction currentDirection
        -GravityCalculator calculator
        +SetGravityDirection(Direction direction)
        +ApplyGravityToBoard(BoardState state)
        +CalculateTileMovement(Vector2Int position)
    }

    class InputManager {
        -SwipeDetector swipeDetector
        -TapDetector tapDetector
        -InputMode currentMode
        +ProcessInput()
        +HandleSwipe(SwipeData swipe)
        +HandleTap(TapData tap)
        +SwitchMode(InputMode mode)
    }

    class PowerUpExecutor {
        -IPowerUp currentPowerUp
        -PowerUpInventory inventory
        +SelectPowerUp(PowerUpType type)
        +ExecuteSelectedPowerUp()
        +PreviewPowerUp(PowerUpType type)
        +ValidatePowerUp(IPowerUp powerUp)
    }

    %% Momentum-Based Scoring System
    class MomentumSystem {
        -float momentum
        -float maxMomentum
        -float turnEndDecay
        +float CurrentMomentum
        +HeatLevel CurrentHeatLevel
        +float GetScoreMultiplier()
        +void AddMatchHeat(int matchSize)
        +void AddCascadeHeat(int cascadeLevel)
        +void AddPatternHeat(PatternType pattern)
        +void TriggerPowerOrbBoost()
        +void ApplyTurnEndDecay()
    }

    class TurnScoreCalculator {
        -int tileBaseValue
        -int edgeMultiplier
        -int transitionMultiplier
        -int centerMultiplier
        -int lShapeBonus
        -int crossBonus
        -int powerOrbBasePoints
        +TurnScoreResult CalculateTurnScore(TurnResult result)
        -int CalculateBaseScore(List~Tile~ clearedTiles)
        -int CalculatePatternBonus(TurnResult result)
        -float CalculateHeatGain(TurnResult result)
    }

    class HeatAudioManager {
        -AudioSource baseLayer
        -AudioSource rhythmLayer
        -AudioSource melodyLayer
        -AudioSource climaxLayer
        -float baseBPM
        -float currentBPM
        +void OnHeatLevelChanged(float newHeat)
        +void OnMaxHeatReached()
        +void OnHeatDecay()
        -void UpdateAudioForHeatLevel(HeatLevel heatLevel)
        -void UpdateTempo(float heat)
        -void StartHeartbeat()
    }

    class HeatUIManager {
        -Slider heatMeter
        -Image heatMeterFill
        -TextMeshProUGUI multiplierText
        -TextMeshProUGUI heatLevelText
        -ParticleSystem heatParticles
        -ParticleSystem flameParticles
        -ParticleSystem infernoParticles
        -Image screenEdgeGlow
        +void OnMomentumChanged(float newMomentum)
        +void OnHeatLevelChanged(float newHeat)
        +void OnMaxHeatReached()
        -void UpdateVisualEffects(HeatLevel heatLevel)
        -void TransitionToColor(Color targetColor)
        -void UpdateParticleEffects(HeatLevel heatLevel)
    }

    class PowerOrb {
        -PowerOrbData data
        -Vector2Int boardPosition
        -Vector2Int targetEdge
        -int age
        -bool isActive
        -bool hasReachedEdge
        +void Initialize(PowerOrbData orbData, Vector2Int position)
        +void MoveTowardEdge()
        +void ReachTargetEdge()
        +void LoseOrb()
        +int GetScoreValue()
        +bool ReachedCorrectEdge()
    }

    class PowerOrbManager {
        -PowerOrbData[] powerOrbTypes
        -List~PowerOrb~ activeOrbs
        -Dictionary~Vector2Int, PowerOrb~ orbPositions
        -float gameStartTime
        +bool TrySpawnPowerOrb(PowerOrbData orbData)
        +void HandleOrbCollected(PowerOrb orb)
        +void HandleOrbLost(PowerOrb orb)
        +List~PowerOrb~ GetActiveOrbs()
        +PowerOrb GetOrbAtPosition(Vector2Int position)
        +void ClearAllOrbs()
    }

    class PowerOrbData {
        +OrbColor color
        +Vector2Int targetEdge
        +int baseScore
        +int ageBonus
        +float baseSpawnChance
        +float maxSpawnChance
        +Vector2Int[] centerSpawnPositions
        +Color glowColor
        +float pulseSpeed
        +float glowIntensity
        +int CalculateScore(int age)
        +float GetSpawnChance(float gameTime)
        +Vector2Int GetRandomSpawnPosition()
    }

    class TurnResult {
        +List~Tile~ ClearedTiles
        +List~int~ MatchSizes
        +int CascadeLevel
        +bool HasLShape
        +bool HasCross
        +bool PowerOrbCollected
        +PowerOrb CollectedPowerOrb
    }

    class TurnScoreResult {
        +int BaseScore
        +int PatternBonus
        +int PowerOrbScore
        +int TotalBeforeMultiplier
        +float Multiplier
        +int FinalScore
        +float HeatGained
        +float FinalHeat
        +MomentumSystem.HeatLevel HeatLevel
    }

    %% Data Classes
    class BoardState {
        +TileData[,] grid
        +Vector2Int size
        +int emptyCells
        +GetTile(Vector2Int position)
        +SetTile(Vector2Int position, TileData tile)
        +IsValidPosition(Vector2Int position)
    }

    class MatchData {
        +Vector2Int[] positions
        +TileType tileType
        +MatchType matchType
        +int score
        +bool isCascade
        +int cascadeLevel
        +CalculateScore()
        +IsValid()
    }

    class TileData {
        +TileType type
        +Color color
        +Vector2Int position
        +int id
        +bool isPowerUp
        +PowerUpType powerType
    }

    class QueueState {
        +TileData[] tiles
        +int currentIndex
        +int totalGenerated
        +QueueStatistics statistics
    }

    %% Core Flow Relationships
    GameManager -->|"1. Orchestrates"| BoardController
    GameManager -->|"2. Manages"| QueueSystem
    GameManager -->|"3. Processes"| MatchDetector
    GameManager -->|"4. Controls"| PowerUpExecutor
    GameManager -->|"5. Handles"| InputManager
    GameManager -->|"6. Manages"| MomentumSystem
    GameManager -->|"7. Uses"| TurnScoreCalculator
    GameManager -->|"8. Controls"| PowerOrbManager

    %% Input to Board Flow
    InputManager -->|"Swipe/Tap"| GravitySystem
    GravitySystem -->|"Direction"| GameManager
    GameManager -->|"Request Tiles"| QueueSystem

    %% Queue to Board Flow
    QueueSystem -->|"Provides Tiles"| BoardController
    QueueSystem -->|"Uses"| TileDistributor
    TileDistributor -->|"Generates"| QueueState

    %% Board to Match Flow
    BoardController -->|"Places Tiles"| BoardState
    BoardController -->|"Triggers"| MatchDetector
    MatchDetector -->|"Analyzes"| BoardState
    MatchDetector -->|"Creates"| MatchData

    %% Match to Score Flow
    MatchDetector -->|"Reports Matches"| GameManager
    GameManager -->|"Updates Score"| GameManager
    MatchDetector -->|"Handles Cascades"| MatchDetector

    %% Power-Up Integration
    PowerUpExecutor -->|"Modifies"| BoardController
    PowerUpExecutor -->|"Affects"| QueueSystem
    PowerUpExecutor -->|"Uses"| GameManager

    %% Scoring System Relationships
    MatchDetector -->|"Creates"| TurnResult
    TurnScoreCalculator -->|"Uses"| MomentumSystem
    TurnScoreCalculator -->|"Creates"| TurnScoreResult
    TurnScoreCalculator -->|"Processes"| TurnResult
    MomentumSystem -->|"Notifies"| HeatAudioManager
    MomentumSystem -->|"Notifies"| HeatUIManager
    PowerOrbManager -->|"Manages"| PowerOrb
    PowerOrbManager -->|"Uses"| PowerOrbData
    PowerOrbManager -->|"Triggers"| MomentumSystem
    PowerOrb -->|"Uses"| PowerOrbData
    PowerOrb -->|"Notifies"| PowerOrbManager

    %% Data Relationships
    BoardController -->|"Manages"| TileData
    BoardController -->|"Creates"| BoardState
    MatchDetector -->|"Creates"| MatchData
    QueueSystem -->|"Manages"| QueueState
    QueueSystem -->|"Contains"| TileData

    %% Critical Flow Annotations
    note for GameManager "Central orchestrator<br/>Manages all game systems<br/>Handles state transitions"
    note for BoardController "Tile placement & management<br/>Gravity application<br/>Match triggering"
    note for MatchDetector "Pattern recognition<br/>Score calculation<br/>Cascade detection"
    note for QueueSystem "Tile supply chain<br/>Anti-frustration logic<br/>Distribution optimization"

    %% Flow Direction Indicators
    GameManager ..>|"1→2→3→4→5"| GameManager : "Core Game Loop"
    InputManager ..>|"Input"| GravitySystem : "Player Action"
    QueueSystem ..>|"Tiles"| BoardController : "Tile Supply"
    BoardController ..>|"State"| MatchDetector : "Match Check"
    MatchDetector ..>|"Results"| GameManager : "Score Update"
